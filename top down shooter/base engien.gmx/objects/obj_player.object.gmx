<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wallace</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// declare variables
messageSpeak = "none";
difference = "none";
mission = "none";
objective = "no objective";
objectiveNumber = 1;
mission = "none";
track = "none";
soundPlayed = false;
trackLoop = "none";
trackAfterLoop = "none";
waitTrack = "snd_milestones00";

// trainer values

immortal = false;
displayTrainer = true;
displayDebug = true;
nightMode = false;

floorNumber = 1;
legFrame = 1;
alarm[1] = 10;

axis = "none";
dir = "none";

frame = 0;

playerSpeed = 3;
playerSprintSpeed = 7;
currentMaxSpeed = 5;
movementDirection = 90;
playerSpeedS = 0;
playerSpeedAcc = 0.5;
playerSpeedDcc = 1;
lookSpeed = 8;
lookSprintSpeed = 4;
currentLookSpeed = 4;

ready = true;
dead = false;

swayRange = 15;
firePause = 5;
fireEvent = "HOLD";
canAim = true;
aiming = false;
camTarget = obj_player;
depth = 0;

control = true;


// particle system
global.blood = part_system_create()
part_system_depth(global.blood, 10);

// pathfinding
global.grid = mp_grid_create(0, 0, room_width/64+32, room_height/64+32, 64, 64);
global.writeToGrid = true;
alarm[2] = 1;

// skeletal-ish animation

moveInput = false
global.showSkeleton = false;
global.skControl = "LEGS";

// neutral legs

skLegLeftOneX = 10;
skLegLeftOneY = 50;
skLegRightOneX = 15;
skLegRightOneY = 50;

skLegLeftTwoX = 0;
skLegLeftTwoY = 100;
skLegRightTwoX = 0;
skLegRightTwoY = 100;

tskLegLeftOneX = 10;
tskLegLeftOneY = 50;
tskLegRightOneX = 15;
tskLegRightOneY = 50;

tskLegLeftTwoX = 0;
tskLegLeftTwoY = 100;
tskLegRightTwoX = 0;
tskLegRightTwoY = 100;

// neutral arms

skArmLeftOneX = 30;
skArmLeftOneY = 50;
skArmLeftTwoX = 45;
skArmLeftTwoY = 100;

tskArmLeftOneX = 30;
tskArmLeftOneY = 50;
tskArmLeftTwoX = 45;
tskArmLeftTwoY = 100;

skArmRightOneX = 30;
skArmRightOneY = 50;
skArmRightTwoX = 45;
skArmRightTwoY = 100;

tskArmRightOneX = 30;
tskArmRightOneY = 50;
tskArmRightTwoX = 45;
tskArmRightTwoY = 100;

dabCheck = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.writeToGrid = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if wInput = true or sInput = true or aInput = true or dInput = true{
    legFrame += 1;
    }
alarm[1] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// trainer

if keyboard_check_pressed(vk_f1){
    immortal = !immortal;
    
    }
    
if keyboard_check_pressed(vk_f2){
    displayTrainer = !displayTrainer;
    
    }

if keyboard_check_pressed(vk_f3){
    displayDebug = !displayDebug;
    
    }
    
if keyboard_check_pressed(vk_f4){
    nightMode = !nightMode;
    
    }
    
if keyboard_check_pressed(vk_f5){
    if global.shadowQuality &lt; 3{
        global.shadowQuality += 1;
        
        }else{
        global.shadowQuality = 1;
        
        }
   
    }
    
if keyboard_check_pressed(vk_f6){
    if global.nightQuality &lt; 3{
        global.nightQuality += 1;
        
        }else{
        global.nightQuality = 1;
        
        }
   
    }
    
if keyboard_check_pressed(vk_f7){
    global.showSkeleton = !global.showSkeleton;
    
    }
    
if keyboard_check_pressed(vk_f8){
    if global.skControl = "LEGS" {global.skControl = "LEFTARM"}else
    if global.skControl = "LEFTARM" {global.skControl = "RIGHTARM"}else
    if global.skControl = "RIGHTARM" {global.skControl = "LEGS"};
    
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement
canLook = false;

if global.cutscene = false
{

if dead = false
{
wInput = keyboard_check(ord("W"));
aInput = keyboard_check(ord("A"));
sInput = keyboard_check(ord("S"));
dInput = keyboard_check(ord("D"));

if wInput or aInput or sInput or dInput {moveInput = true}

if control = true{

// update the variables for inputs
mouseDirection = point_direction(x, y, mouse_x, mouse_y);
aim = mouseDirection;

if keyboard_check(vk_lshift){
    currentMaxSpeed = playerSprintSpeed;
    movementDirection = image_angle;
    }else{
    currentMaxSpeed = playerSpeed;
    movementDirection = mouseDirection;
    }
        
if keyboard_check_released(vk_lshift) and playerSpeedS &gt; currentMaxSpeed{
    playerSpeedS = currentMaxSpeed;
    }

//smooth the movement
if wInput = true or aInput = true or sInput = true or dInput = true{
    canLook = true;
    if currentMaxSpeed &gt; playerSpeedS{
        playerSpeedS += playerSpeedAcc;
        
        }
    }else{
        if playerSpeedS &gt; 0{    
            playerSpeedS -= playerSpeedDcc;
            
            }
        }

// animations
if (wInput or sInput) and !keyboard_check(vk_shift){
    ani_walk();
    
    }
    
if (wInput or sInput) and keyboard_check(vk_shift){
    ani_run();
    
    }

// check the inputs
if wInput = true{
    
    //move the player in the direction of the mouse
    x += lengthdir_x(playerSpeedS*1.5, movementDirection);
    y += lengthdir_y(playerSpeedS*1.5, movementDirection);
    
    }
    
if aInput = true{
    
    //strafe to the right
    x += lengthdir_x(playerSpeedS*0.5, movementDirection + 90);
    y += lengthdir_y(playerSpeedS*0.5, movementDirection + 90);
    
    }
    
if dInput = true{
    
    //strafe to the left
    x += lengthdir_x(playerSpeedS*0.5, movementDirection - 90);
    y += lengthdir_y(playerSpeedS*0.5, movementDirection - 90);
    
    }
    
if sInput = true{
    
    //move the player in the opposite direction of the mouse
    x += lengthdir_x(playerSpeedS*0.5, movementDirection - 180);
    y += lengthdir_y(playerSpeedS*0.5, movementDirection - 180);
    
    }
    
}

if speed &gt; 0{
    speed -= 0.3;
    
    }else if speed &lt; 0{
    speed = 0;
    
    }

    
}else{
    if speed &gt; 0 speed -= 2;
    
    
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// camera
// needs smoothing

if global.cutscene = false{
    view_xview = x - view_wview/2;
    view_yview = y - view_hview/2;
    
    view_wview = 1920;
    view_hview = 1080;
    
    }else{
    var view_xpView, view_ypView;
    var view_hpView, view_wpView;
    view_xpView = view_xview; view_ypView = view_yview;
    view_hpView = view_hview; view_wpView = view_wview;
    
    view_xview = global.Tview_xview;
    view_yview = global.Tview_yview;
    view_hview = global.Tview_hview;
    view_wview = global.Tview_wview;
    
    if point_distance(view_xpView, view_ypView, view_xview, view_yview) &gt; global.Tview_speed{
        var dir; dir = point_direction(view_xpView, view_ypView, view_xview, view_yview);
        view_xview = view_xpView + lengthdir_x(global.Tview_speed, dir);
        view_yview = view_ypView + lengthdir_y(global.Tview_speed, dir);
        
        }
        
    //if point_distance(view_xpView, view_ypView, view_xview, view_yview) &gt; global.Tview_speed{
    //    var dir; dir = point_direction(view_xpView, view_ypView, view_xview, view_yview);
    //    view_xview = view_xpView + lengthdir_x(global.Tview_speed, dir);
    //    view_yview = view_ypView + lengthdir_y(global.Tview_speed, dir);
    //    
    //    }
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shooting
if dead = false and aiming = true
{

// mouse direction variable

if ready = true{

mouseDirection = point_direction(x, y, mouse_x, mouse_y);
sway = random_range(-swayRange, swayRange);

if fireEvent = "PRESS"
{

if mouse_check_button_pressed(mb_left){
    // create the bullet with velocity
    with (instance_create(x, y, obj_bullet)){
        parent = obj_player;
        speed = 64;
        direction = obj_player.mouseDirection + obj_player.sway;
        
        }
        
    // apply the weapon pause to make the gun not match fire
    alarm[0] = firePause;
    ready = false;
    
    }
    
}

if fireEvent = "HOLD"
{

if mouse_check_button(mb_left){
    // create the bullet with velocity
    with (instance_create(x, y, obj_bullet)){
        parent = obj_player
        speed = 64;
        direction = obj_player.mouseDirection + obj_player.sway;
        floorNumber = obj_player.floorNumber;
        
        }
        
    // apply the weapon pause to make the gun not match fire
    alarm[0] = firePause;
    ready = false;

    }

}

}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// run the mission script

if mission != "none"{
    script_execute(mission);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// audio
if trackLoop = false{
    if track != "none"{
        if audio_is_ending(track) and audio_is_ending(waitTrack){
            if soundPlayed = false{
                audioIndex = audio_play_sound(track, 1, false);
                soundPlayed = true;
                }else{
                track = trackAfterLoop;
                trackLoop = true;
                }
            }
        }
    }

if trackLoop = true{
    if track != "none"{
        if audio_is_ending(track) /*and audio_is_ending(waitTrack)*/{
            audioIndex = audio_play_sound(track, 1, 0);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// aiming

// determine the can aim variable
canAim = true;

// check if the player is aiming
if mouse_check_button(mb_right) and canAim = true{
    aiming = true;
    canLook = true;
    
    }else{
        aiming = false;
        
        }

// center the mouse when aiming begins

if canAim = true and mouse_check_button_pressed(mb_right){
    //view_wview = 1920;
    //view_hview = 1080;
    //view_xview = x - view_wview/2;
    //view_yview = y - view_hview/2;
    
    window_mouse_set(1920/2, 1080/2);
    
    }
        
// change the camera when aiming

if aiming = true{
    view_wview = 1920;
    view_hview = 1080;
    view_xview = x - view_wview/2;
    view_yview = y - view_hview/2;
    
    mouseXOffset = window_mouse_get_x() - view_wview/2;
    mouseYOffset = window_mouse_get_y() - view_hview/2;
    mouseXAdd = mouseXOffset * 2;
    mouseYAdd = mouseYOffset * 2;
    view_xview += mouseXAdd;
    view_yview += mouseYAdd;
    //view_xview -= 1920/2;
    //view_yview -= 1080/2;
    
    }

if keyboard_check(vk_lshift){
    currentLookSpeed = lookSprintSpeed;
    }else{
    currentLookSpeed = lookSpeed;
    }

// aiming
if image_angle &lt; 0 image_angle = 359;
if image_angle &gt; 360 image_angle = 1;

if image_angle &lt; 90 and point_direction(x, y, mouse_x, mouse_y) &gt; 270{
    if canLook = true image_angle -= currentLookSpeed
    }else if image_angle &gt; 270 and point_direction(x, y, mouse_x, mouse_y) &lt; 90{
        image_angle += currentLookSpeed
        
    }else{
        if canLook = true image_angle += clamp(point_direction(x, y, mouse_x, mouse_y) - image_angle, -currentLookSpeed, currentLookSpeed);
        
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cutscene movement

if global.cutscene = true{
    cutscene_actor_properties();
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dabbing
// type 69 to dab

if keyboard_check_pressed(vk_anykey){
    if keyboard_check_pressed(ord("6")){
        dabCheck = 1;
        
        }else{
        dabCheck = 0;
        
        }
    
    }
    
if keyboard_check_pressed(vk_anykey){
    if keyboard_check_pressed(ord("9")){
        dabCheck = 2;
        frame = 1;
        
        }else{
        dabCheck = 0;
        
        }
    
    }
    
if dabCheck = 2{
    ani_dab();
    if frame = 0 {dabCheck = 0};
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(other.parent = obj_player) and immortal = false
{

/// kill the enemy and throw him back

dead = true;

direction = other.direction;
speed = 30;

// request blood to be drawn at this spot

drawBlood = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(floorNumber = 0 and other.floorNumber = "none"){
    if other.active = true{
        
        if dead = true{
            speed = 0;
            
            }
        iOther = other;
        
        xOther = iOther.x;
        yOther = iOther.y;
        xDifferenece = x - xOther;
        yDifferenece = y - yOther;
        xMagnitude = abs(xDifferenece);
        yMagnitude = abs(yDifferenece);
        
        curx = x;
        
        // determine the direction the player will slip in
        if yDifferenece &lt; 0 and yMagnitude &gt; xMagnitude dir = "UP";
        if yDifferenece &gt; 0 and yMagnitude &gt; xMagnitude dir = "DOWN";
        if xDifferenece &lt; 0 and xMagnitude &gt; yMagnitude dir = "LEFT";
        if xDifferenece &gt; 0 and xMagnitude &gt; yMagnitude dir = "RIGHT";
        
        //take action to make collision slippery
        
        if dir = "UP" y = yprevious;
        else if dir = "DOWN" y = yprevious;
        else if dir = "LEFT" x = xprevious;
        else if dir = "RIGHT" x = xprevious;
        }
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end the game
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// prevent leaks

// destroy the particle system of blood
part_system_destroy(global.blood);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debugging

draw_set_font(fnt_testing);
draw_set_colour(c_black);

if displayDebug{

    draw_set_alpha(0.6);
    draw_set_colour(c_black);
    draw_rectangle(5, 10, 200, 300, false);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    
    draw_text(10, 20, "DEBUGGING VALUES");
    draw_text(10, 40, "wall dir: " + string(dir));
    draw_text(10, 60, "floor number: " + string(floorNumber));
    draw_text(10, 80, "ready to fire: " + string(ready));
    draw_text(10, 120, "track diff: " + string(difference));
    draw_text(10, 140, "track: " + string(track));
    draw_text(10, 160, "trackLoop: " + string(trackLoop));
    draw_text(10, 180, "car speed: " + string(obj_car.speed));
    draw_text(10, 200, "aliveEnemies: " + string(global.aliveEnemies));
    draw_text(10, 220, "track: " + string(track));
    if audio_is_playing(track){
        draw_text(10, 260, "track length: " + string(audio_sound_length(track)))
        draw_text(10, 280, "track position: " + string(audio_sound_get_track_position(track)))
        }
    }

if displayTrainer{
    
    draw_set_alpha(0.6);
    draw_set_colour(c_black);
    draw_rectangle(205, 10, 400, 200, false);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    
    draw_text(210, 20, "TRAINER")
    draw_text(210, 40, "immortality (f1): " + string(immortal));
    draw_text(210, 60, "display trainer (f2): " + string(displayTrainer));
    draw_text(210, 80, "display debug (f3): " + string(displayDebug));
    draw_text(210, 100, "night mode (f4): " + string(nightMode));
    draw_text(210, 120, "shadow quality (f5)" + string(global.shadowQuality));
    draw_text(210, 140, "night quality (f6)" + string(global.nightQuality));
    draw_text(210, 160, "Show Skeleton (f7)" + string(global.showSkeleton));
    draw_text(210, 180, "skControl (f8)" + string(global.skControl));
    
    }

// testing the cutscene boxes
/* not currently needed
draw_text_box(10, 10, 1900,
"this is a test box, this is added exposition to extend the height"
, 10, 50);
*/

if global.showSkeleton{
    // legs
    draw_set_colour(c_black);
    draw_set_alpha(0.6);
    draw_rectangle(450, 20, 750, 320, false);
    draw_set_alpha(1);
    draw_set_colour(c_red);
    draw_circle(600+tskLegRightOneX, 50+tskLegRightOneY, 5, true);
    draw_circle(600+tskLegRightTwoX, 50+tskLegRightTwoY, 5, true);
    draw_line(600, 50, 600+skLegLeftOneX, 50+skLegLeftOneY);
    draw_line(600+skLegLeftOneX, 50+skLegLeftOneY, 600+skLegLeftTwoX, 50+skLegLeftTwoY);
    draw_set_color(c_blue);
    draw_circle(600+tskLegLeftOneX, 50+tskLegLeftOneY, 5, true);
    draw_circle(600+tskLegLeftTwoX, 50+tskLegLeftTwoY, 5, true);
    
    draw_set_colour(c_white);
    draw_line(600, 50, 600+skLegRightOneX, 50+skLegRightOneY);
    draw_line(600+skLegRightOneX, 50+skLegRightOneY, 600+skLegRightTwoX, 50+skLegRightTwoY);
    
    draw_set_colour(c_white);
    draw_text(470, 200, string(skLegRightOneX));
    draw_text(470, 220, string(skLegRightOneY));
    draw_text(470, 240, string(skLegRightTwoX));
    draw_text(470, 260, string(skLegRightTwoY));
    draw_text(570, 220, string(point_distance(skLegRightOneX, skLegRightOneY, skLegRightTwoX,skLegRightTwoY)));
    draw_text(570, 260, string(point_distance(0, 0, skLegRightOneX, skLegRightOneY)));
    
    draw_text(670, 200, string(tskLegRightOneX));
    draw_text(670, 220, string(tskLegRightOneY));
    draw_text(670, 240, string(tskLegRightTwoX));
    draw_text(670, 260, string(tskLegRightTwoY));
    
    // arms
    draw_set_colour(c_black);
    draw_set_alpha(0.6);
    draw_rectangle(770, 20, 1070, 320, false);
    draw_set_alpha(1);
    draw_set_colour(c_red);
    draw_circle(890+tskArmRightOneX, 100+tskArmRightOneY, 5, true);
    draw_circle(890+tskArmRightTwoX, 100+tskArmRightTwoY, 5, true);
    draw_set_color(c_blue);
    draw_circle(950+tskArmLeftOneX, 100+tskArmLeftOneY, 5, true);
    draw_circle(950+tskArmLeftTwoX, 100+tskArmLeftTwoY, 5, true);
    
    draw_set_colour(c_white);
    draw_line(950, 100, 950+skArmLeftOneX, 100+skArmLeftOneY);
    draw_line(950+skArmLeftOneX, 100+skArmLeftOneY, 950+skArmLeftTwoX, 100+skArmLeftTwoY);
    draw_line(890, 100, 890+skArmRightOneX, 100+skArmRightOneY);
    draw_line(890+skArmRightOneX, 100+skArmRightOneY, 890+skArmRightTwoX, 100+skArmRightTwoY);
    
    draw_set_colour(c_white);
    draw_text(790, 200, string(skArmLeftOneX));
    draw_text(790, 220, string(skArmLeftOneY));
    draw_text(790, 240, string(skArmLeftTwoX));
    draw_text(790, 260, string(skArmLeftTwoY));
    draw_text(890, 220, string(point_distance(skArmLeftOneX, skArmLeftOneY, skArmLeftTwoX,skArmLeftTwoY)));
    draw_text(890, 260, string(point_distance(0, 0, skArmLeftOneX, skArmLeftOneY)));
    
    draw_text(990, 200, string(tskArmLeftOneX));
    draw_text(990, 220, string(tskArmLeftOneY));
    draw_text(990, 240, string(tskArmLeftTwoX));
    draw_text(990, 260, string(tskArmLeftTwoY));
    
    draw_set_colour(c_black);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the objective text

draw_set_halign(fa_center);
if objective != "none"
draw_text(960, 1050, objective);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// skeletal animation

// fix the leg point distance to 50
// upper leg

skDir = point_direction(0, 0, tskLegLeftOneX, tskLegLeftOneY);
skLegLeftOneX = lengthdir_x(50, skDir);
skLegLeftOneY = lengthdir_y(50, skDir);


skDir = point_direction(0, 0, tskLegRightOneX, tskLegRightOneY);
skLegRightOneX = lengthdir_x(50, skDir);
skLegRightOneY = lengthdir_y(50, skDir);

// lower leg

skDir = point_direction(skLegLeftOneX, skLegLeftOneY, tskLegLeftTwoX, tskLegLeftTwoY);
skLegLeftTwoX = skLegLeftOneX + lengthdir_x(50, skDir);
skLegLeftTwoY = skLegLeftOneY + lengthdir_y(50, skDir);

skDir = point_direction(skLegRightOneX, skLegRightOneY, tskLegRightTwoX, tskLegRightTwoY);
skLegRightTwoX = skLegRightOneX + lengthdir_x(50, skDir);
skLegRightTwoY = skLegRightOneY + lengthdir_y(50, skDir);

// debugging

if global.skControl = "LEGS"{
    if keyboard_check(vk_right) {tskLegRightOneX += 5};
    if keyboard_check(vk_left) {tskLegRightOneX -= 5};
    if keyboard_check(vk_down) {tskLegRightOneY += 5};
    if keyboard_check(vk_up) {tskLegRightOneY -= 5};
    
    if keyboard_check(ord("K")) {tskLegRightTwoX += 5};
    if keyboard_check(ord("H")) {tskLegRightTwoX -= 5};
    if keyboard_check(ord("J")) {tskLegRightTwoY += 5};
    if keyboard_check(ord("U")) {tskLegRightTwoY -= 5};
    
    }

tskLegRightOneX = clamp(tskLegRightOneX, -150, 150);
tskLegRightOneY = clamp(tskLegRightOneY, -20, 280);
tskLegRightTwoX = clamp(tskLegRightTwoX, -150, 150);
tskLegRightTwoY = clamp(tskLegRightTwoY, -20, 208);

tskLegLeftOneX = -tskLegRightOneX;
tskLegLeftOneY = tskLegRightOneY;
tskLegLeftTwoX = -tskLegRightTwoX;
tskLegLeftTwoY = tskLegRightTwoY;

// arms left

if point_distance(0, 0, tskArmLeftOneX, tskArmLeftOneY) &gt; 50{
    skDir = point_direction(0, 0, tskArmLeftOneX, tskArmLeftOneY);
    skArmLeftOneX = lengthdir_x(50, skDir);
    skArmLeftOneY = lengthdir_y(50, skDir);
    }else{
    skArmLeftOneX = tskArmLeftOneX;
    skArmLeftOneY = tskArmLeftOneY;
    }

if point_distance(skArmLeftOneX, skArmLeftOneY, tskArmLeftTwoX, tskArmLeftTwoY) &gt; 50{    
    skDir = point_direction(skArmLeftOneX, skArmLeftOneY, tskArmLeftTwoX, tskArmLeftTwoY);
    skArmLeftTwoX = skArmLeftOneX + lengthdir_x(50, skDir);
    skArmLeftTwoY = skArmLeftOneY + lengthdir_y(50, skDir);
    }else{
    skArmLeftTwoX = tskArmLeftTwoX;
    skArmLeftTwoY = tskArmLeftTwoY;
    }
    
if global.skControl = "LEFTARM"{
    if keyboard_check(vk_right) {tskArmLeftOneX += 5};
    if keyboard_check(vk_left) {tskArmLeftOneX -= 5};
    if keyboard_check(vk_down) {tskArmLeftOneY += 5};
    if keyboard_check(vk_up) {tskArmLeftOneY -= 5};
    
    if keyboard_check(ord("K")) {tskArmLeftTwoX += 5};
    if keyboard_check(ord("H")) {tskArmLeftTwoX -= 5};
    if keyboard_check(ord("J")) {tskArmLeftTwoY += 5};
    if keyboard_check(ord("U")) {tskArmLeftTwoY -= 5};
    
    }

// arms right

if point_distance(0, 0, tskArmRightOneX, tskArmRightOneY) &gt; 50{
    skDir = point_direction(0, 0, tskArmRightOneX, tskArmRightOneY);
    skArmRightOneX = lengthdir_x(50, skDir);
    skArmRightOneY = lengthdir_y(50, skDir);
    }else{
    skArmRightOneX = tskArmRightOneX;
    skArmRightOneY = tskArmRightOneY;
    }

if point_distance(skArmRightOneX, skArmRightOneY, tskArmRightTwoX, tskArmRightTwoY) &gt; 50{    
    skDir = point_direction(skArmRightOneX, skArmRightOneY, tskArmRightTwoX, tskArmRightTwoY);
    skArmRightTwoX = skArmRightOneX + lengthdir_x(50, skDir);
    skArmRightTwoY = skArmRightOneY + lengthdir_y(50, skDir);
    }else{
    skArmRightTwoX = tskArmRightTwoX;
    skArmRightTwoY = tskArmRightTwoY;
    }
    
if global.skControl = "RIGHTARM"{
    if keyboard_check(vk_right) {tskArmRightOneX += 5};
    if keyboard_check(vk_left) {tskArmRightOneX -= 5};
    if keyboard_check(vk_down) {tskArmRightOneY += 5};
    if keyboard_check(vk_up) {tskArmRightOneY -= 5};
    
    if keyboard_check(ord("K")) {tskArmRightTwoX += 5};
    if keyboard_check(ord("H")) {tskArmRightTwoX -= 5};
    if keyboard_check(ord("J")) {tskArmRightTwoY += 5};
    if keyboard_check(ord("U")) {tskArmRightTwoY -= 5};
    
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw stuff including the player
// draw the legs
// lines are placeholders that will be replaced with drawn arm sprites

draw_set_colour(make_colour_rgb(31, 34, 53));

draw_line_width(x+lengthdir_x(skLegLeftOneX*0.75, image_angle)+lengthdir_x(10, image_angle+90),
y+lengthdir_y(skLegLeftOneX*0.75, image_angle)+lengthdir_y(10, image_angle+90),
x+lengthdir_x(skLegLeftTwoX*0.75, image_angle)+lengthdir_x(10, image_angle+90),
y+lengthdir_y(skLegLeftTwoX*0.75, image_angle)+lengthdir_y(10, image_angle+90), 30);

draw_line_width(x+lengthdir_x(skLegRightOneX*0.75, image_angle)+lengthdir_x(10, image_angle-90),
y+lengthdir_y(skLegRightOneX*0.75, image_angle)+lengthdir_y(10, image_angle-90),
x+lengthdir_x(skLegRightTwoX*0.75, image_angle)+lengthdir_x(10, image_angle-90),
y+lengthdir_y(skLegRightTwoX*0.75, image_angle)+lengthdir_y(10, image_angle-90), 30);

draw_set_colour(make_colour_rgb(38, 57, 81));

draw_line_width(x+lengthdir_x(10, image_angle+90), y+lengthdir_y(10, image_angle+90),
x+lengthdir_x(skLegLeftOneX*0.75, image_angle)+lengthdir_x(10, image_angle+90),
y+lengthdir_y(skLegLeftOneX*0.75, image_angle)+lengthdir_y(10, image_angle+90), 30);

draw_line_width(x+lengthdir_x(10, image_angle-90), y+lengthdir_y(10, image_angle-90),
x+lengthdir_x(skLegRightOneX*0.75, image_angle)+lengthdir_x(10, image_angle-90),
y+lengthdir_y(skLegRightOneX*0.75, image_angle)+lengthdir_y(10, image_angle-90), 30);

draw_set_colour(c_black);

if abs(skLegRightTwoX) &gt; abs(skLegRightOneX){
    /*
    draw_curve(
    x+lengthdir_x(skLegRightOneX*0.75, image_angle) + lengthdir_x(10, image_angle-90)+lengthdir_x(10, image_angle-90),
    y+lengthdir_y(skLegRightOneX*0.75, image_angle) + lengthdir_y(10, image_angle-90)+lengthdir_x(10, image_angle-90),
    x+lengthdir_x(skLegRightOneX*0.75, image_angle) + lengthdir_x(10, image_angle+90)+lengthdir_x(10, image_angle-90),
    y+lengthdir_y(skLegRightOneX*0.75, image_angle) + lengthdir_y(10, image_angle+90)+lengthdir_x(10, image_angle-90),
    image_angle + 20, 20);
    */
    }else{
    draw_circle(x+lengthdir_x(skLegRightOneX*0.75, image_angle)+lengthdir_x(10, image_angle-90),
    y+lengthdir_y(skLegRightOneX*0.75, image_angle)+lengthdir_y(10, image_angle-90),
    15, true);
    
    draw_set_colour(make_colour_rgb(38, 57, 81));
    
    draw_circle(x+lengthdir_x(skLegRightOneX*0.75, image_angle)+lengthdir_x(10, image_angle-90),
    y+lengthdir_y(skLegRightOneX*0.75, image_angle)+lengthdir_y(10, image_angle-90),
    15, false);
    
    }

// draw the player
depth = 0;
draw_sprite_ext(spr_wallace, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);

/* arms
draw_set_colour(make_colour_rgb(31, 34, 53));

draw_line_width(x+lengthdir_x(30, image_angle+90), y+lengthdir_y(30, image_angle+90),
x+lengthdir_x(30, image_angle+90)+lengthdir_x(point_distance(0, 0, skArmLeftOneX, skArmLeftOneY)/1.4, point_direction(0, 0, skArmLeftOneX, skArmLeftOneY)+image_angle+90),
y+lengthdir_y(30, image_angle+90)+lengthdir_y(point_distance(0, 0, skArmLeftOneX, skArmLeftOneY)/1.4, point_direction(0, 0, skArmLeftOneX, skArmLeftOneY)+image_angle+90),
20);
draw_line_width(
x+lengthdir_x(30, image_angle+90)+lengthdir_x(point_distance(0, 0, skArmLeftOneX, skArmLeftOneY)/1.4, point_direction(0, 0, skArmLeftOneX, skArmLeftOneY)+image_angle+90),
y+lengthdir_y(30, image_angle+90)+lengthdir_y(point_distance(0, 0, skArmLeftOneX, skArmLeftOneY)/1.4, point_direction(0, 0, skArmLeftOneX, skArmLeftOneY)+image_angle+90),
x+lengthdir_x(30, image_angle+90)+lengthdir_x(point_distance(0, 0, skArmLeftTwoX, skArmLeftTwoY)/1.4, point_direction(0, 0, skArmLeftTwoX, skArmLeftTwoY)+image_angle+90),
y+lengthdir_y(30, image_angle+90)+lengthdir_y(point_distance(0, 0, skArmLeftTwoX, skArmLeftTwoY)/1.4, point_direction(0, 0, skArmLeftTwoX, skArmLeftTwoY)+image_angle+90),
20);

draw_line_width(x+lengthdir_x(30, image_angle-90), y+lengthdir_y(30, image_angle-90),
x+lengthdir_x(30, image_angle-90)+lengthdir_x(point_distance(0, 0, skArmRightOneX, -skArmRightOneY)/1.4, point_direction(0, 0, skArmRightOneX, -skArmRightOneY)+image_angle-90),
y+lengthdir_y(30, image_angle-90)+lengthdir_y(point_distance(0, 0, skArmRightOneX, -skArmRightOneY)/1.4, point_direction(0, 0, skArmRightOneX, -skArmRightOneY)+image_angle-90),
20);
draw_line_width(
x+lengthdir_x(30, image_angle-90)+lengthdir_x(point_distance(0, 0, skArmRightOneX, -skArmRightOneY)/1.4, point_direction(0, 0, skArmRightOneX, -skArmRightOneY)+image_angle-90),
y+lengthdir_y(30, image_angle-90)+lengthdir_y(point_distance(0, 0, skArmRightOneX, -skArmRightOneY)/1.4, point_direction(0, 0, skArmRightOneX, -skArmRightOneY)+image_angle-90),
x+lengthdir_x(30, image_angle-90)+lengthdir_x(point_distance(0, 0, skArmRightTwoX, -skArmRightTwoY)/1.4, point_direction(0, 0, skArmRightTwoX, -skArmRightTwoY)+image_angle-90),
y+lengthdir_y(30, image_angle-90)+lengthdir_y(point_distance(0, 0, skArmRightTwoX, -skArmRightTwoY)/1.4, point_direction(0, 0, skArmRightTwoX, -skArmRightTwoY)+image_angle-90),
20);
*/

// left

draw_sprite_ext(spr_wallace_arm_higher, 0,
x+lengthdir_x(point_distance(0, 0, skArmLeftOneX, skArmLeftOneY), point_direction(0, 0, skArmLeftOneX, skArmLeftOneY)+image_angle)+lengthdir_x(32, image_angle+100), 
y+lengthdir_y(point_distance(0, 0, skArmLeftOneX, skArmLeftOneY), point_direction(0, 0, skArmLeftOneX, skArmLeftOneY)+image_angle)+lengthdir_y(32, image_angle+100), 0.2+
point_distance(skArmLeftOneX, skArmLeftOneY, skArmLeftTwoX, skArmLeftTwoY)/45,
1, image_angle+point_direction(skArmLeftOneX, skArmLeftOneY, skArmLeftTwoX, skArmLeftTwoY), c_white, 1);

draw_sprite_ext(spr_wallace_arm_lower, 0,
x + lengthdir_x(32, image_angle+100), y + lengthdir_y(32, image_angle+100), 0.2+
point_distance(0, 0, skArmLeftOneX, skArmLeftOneY)/40, 1, image_angle+point_direction(0, 0, skArmLeftOneX, skArmLeftOneY), c_white, 1);

// right

draw_sprite_ext(spr_wallace_arm_higher, 0,
x+lengthdir_x(point_distance(0, 0, skArmRightOneX, skArmRightOneY), point_direction(0, 0, skArmRightOneX, skArmRightOneY)+image_angle)+lengthdir_x(32, image_angle-100), 
y+lengthdir_y(point_distance(0, 0, skArmRightOneX, skArmRightOneY), point_direction(0, 0, skArmRightOneX, skArmRightOneY)+image_angle)+lengthdir_y(32, image_angle-100), 0.2+ 
point_distance(skArmRightOneX, skArmRightOneY, skArmRightTwoX, skArmRightTwoY)/45,
-1, image_angle+point_direction(skArmRightOneX, skArmRightOneY, skArmRightTwoX, skArmRightTwoY), c_white, 1);

draw_sprite_ext(spr_wallace_arm_lower, 0,
x + lengthdir_x(32, image_angle-100), y + lengthdir_y(32, image_angle-100), 0.2+
point_distance(0, 0, skArmRightOneX, skArmRightOneY)/40, -1, image_angle+point_direction(0, 0, skArmRightOneX, skArmRightOneY), c_white, 1);

draw_set_colour(c_black);
draw_sprite_ext(spr_wallace, 1, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);


// the player will be drawn with procedural animations that use the sprite xscale and yscale functions on the arms and legs.
// for now this effect is drawn with lines however the lines should be made into sprite drawings


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
