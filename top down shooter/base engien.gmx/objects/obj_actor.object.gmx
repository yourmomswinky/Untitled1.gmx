<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// declare actor unspecific variables


target = instance_nearest(x, y, obj_walk_marker);
lastTarget = "none";
travelTarget = instance_nearest(x, y, obj_walk_marker);

blood = part_system_create();
interactionDistance = 200;
event = 0;
instance = 0;

blood = "none";
dead = false;
drawBlood = false;
bloodPool = false;
bloodDry = false;
messageSpeak = "none";

bloodSides = 200;
bloodMin = 30;
bloodMax = 45;
bloodMinSize = 0.3;
bloodMaxSize = 0.4;
poolMinSize = 0;
poolMaxSize = 2;

// floor variables

active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_size(pool, poolMaxSize, poolMaxSize, 0, 0);
part_type_life(pool, 1000000, 1000000);
part_emitter_burst(global.blood, bloodEmitter, pool, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>building_object</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reduce the speed if dead

if dead = true and speed &gt; 0{
    speed -= 2;
    
    }
    
// blood pools
if dead = true and speed = 0 and bloodDry = false{
    bloodPool = true;
    bloodDry = true;
    
    }
    
if floorNumber = obj_player.floorNumber{
    active = true;
    
    }else{
    active = false;
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// kill the enemy and throw him back
dead = true;

direction = other.direction;
speed = 30;

// request blood to be drawn at this spot
drawBlood = true;

// draw blood to the wall ajacent to the shot
pX = other.parent.x;
pY = other.parent.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if dead stop the enemy

if dead = true{
    speed = 0;
    
    }else{
        //x = xprevious;
        //y = yprevious;
        
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do the actor specific functions
if active = true
script_execute(actorScript);
draw_text(10, 100, actorScript);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw blood if requested

if drawBlood = true{
    draw_set_blend_mode(bm_normal);
    bloodEmitter = part_emitter_create(blood);
    bloodType = part_type_create();
    part_system_automatic_draw(blood, false);
    part_type_blend(bloodType, bm_normal);
    part_type_shape(bloodType, pt_shape_disk);
    part_type_life(bloodType, 1000000, 1000000);
    part_type_size(bloodType, bloodMinSize, bloodMaxSize, 0, 0);
    part_type_colour_rgb(bloodType, 130, 150, 6, 10, 6, 10);
    part_emitter_region(blood, bloodEmitter, x - 50, x + 50, y + 50, y - 50, ps_shape_ellipse, ps_distr_gaussian);
    part_emitter_burst(blood, bloodEmitter, blood, irandom_range(bloodMin, bloodMax));
    part_emitter_region(blood, bloodEmitter, x, x + lengthdir_x(200, obj_player.aim), y, y + lengthdir_y(200, obj_player.aim), ps_shape_line, ps_distr_gaussian);
    part_emitter_burst(blood, bloodEmitter, blood, irandom_range(bloodMin, bloodMax));
    part_emitter_region(blood, bloodEmitter, x - 50, x + 50, y + 50, y - 50, ps_shape_ellipse, ps_distr_gaussian);
    
    drawBlood = false;
    }
    
if bloodPool = true{
    part_emitter_region(global.blood, bloodEmitter, x, x, y, y, ps_shape_ellipse, ps_distr_gaussian);
    pool = part_type_create();
    part_type_colour_rgb(pool, 130, 150, 6, 10, 6, 10);
    part_type_life(pool, room_speed*5, room_speed*5);
    part_type_size(pool, poolMinSize, poolMinSize, poolMaxSize/(room_speed*5), 0);
    part_type_shape(pool, pt_shape_disk);
    part_emitter_burst(blood, bloodEmitter, pool, 1);
    alarm[1] = room_speed*5;
    
    bloodPool = false;
    
    }
    
// determine weather or not the particles should
// be drawn

if obj_player.floorNumber = floorNumber{
    if part_system_exists(blood){
        part_system_drawit(blood);
        }
    }
    
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
