<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = true;
image_speed = 0;
floorNumber = 1;
spd = 0;
direction = 90;
target = instance_nearest(x, y, obj_walk_marker);
lastTarget = "none";
travelTarget = instance_nearest(x, y, obj_walk_marker);

randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// needs correcting for pedestrian

speed = 9;
    
if collision_line(x, y, x + lengthdir_x(64, direction), y + lengthdir_y(64, direction), obj_car, false, true){
    if speed &gt; 0{
        spd = 0;
        }
    }

if point_distance(x, y, target.x, target.y) &lt; 50{
    found = false;
    count = 1;
    
    while found = false{
        i = irandom_range(1, 4);
        if i = 1{
            if target.UP = true{
                travelTarget = collision_line_first(target.x, target.y - 100,
                target.x, target.y - 10000, obj_walk_marker, true, true);
                
                if travelTarget != lastTarget{
                    found = true;
                    lastTarget = target;
                    
                    }
                }
            }
        if i = 2{
            if target.DOWN = true{
                travelTarget = collision_line_first(target.x, target.y + 100,
                target.x, target.y + 10000, obj_walk_marker, true, true);
                
                if travelTarget != lastTarget{
                    found = true;
                    lastTarget = target;
                    
                    }
                }
            }
        if i = 3{
            if target.LEFT = true{
                travelTarget = collision_line_first(target.x - 100, target.y,
                target.x - 10000, target.y, obj_walk_marker, true, true);
                
                if travelTarget != lastTarget{
                    found = true;
                    lastTarget = target;
                    
                    }
                }
            }
        if i = 4{
            if target.RIGHT = true{
                travelTarget = collision_line_first(target.x + 100, target.y,
                target.x + 10000, target.y, obj_walk_marker, true, true);
                
                if travelTarget != lastTarget{
                    found = true;
                    lastTarget = target;
                    
                    }
                }
            }
        
        count+=1;
        if count &gt; 50{
            found = true;
            travelTarget = lastTarget;
            
            }
        
        }
        
    target = travelTarget;
    
    }
    
    if abs(direction - point_direction(x, y, target.x, target.y)) &lt; 3 or abs(direction - point_direction(x, y, target.x, target.y)) &gt; 357{
        turnSpeed = speed * 0.2;
        
        }else{
        turnSpeed = speed * 2 + 10;
        
        }

if collision_line(x, y, x + lengthdir_x(40, direction), y + lengthdir_y(40, direction), obj_walker, false, true){
    direction += 0.1;
    
    }
gradually_turn(self, target, turnSpeed, 1);
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debugging

draw_self();

draw_text(x + 32, y + 32, lastTarget);
draw_text(x + 32, y + 64, target);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
