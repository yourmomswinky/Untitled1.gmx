<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// declare the variables
alarm[0] = 60;
alarm[2] = 1;

global.colList[0] = "none";
global.colList[1] = "none";

blood = part_system_create();
dead = false;
drawBlood = false;
bloodPool = false;
bloodDry = false;
// global.aliveEnemies += 1;

bloodSides = 200;
bloodMin = 30;
bloodMax = 45;
bloodMinSize = 0.3;
bloodMaxSize = 0.4;
poolMinSize = 0;
poolMaxSize = 2;
gCover = false;
target = obj_player;

ready = true;
swayRange = 20;
firePause = 30;

// do not forget to designate a weapon in the object's creation code
// valid weapons:
// knife
// pistol
// rifle
// none

// pathfinding stuff

mp_potential_settings(360, 90, 20, true);

path = path_add();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_size(pool, poolMaxSize, poolMaxSize, 0, 0);
part_type_life(pool, 1000000, 1000000);
part_emitter_burst(global.blood, bloodEmitter, pool, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fire a shot
// calculate the sway and then direction



if  floorNumber = obj_player.floorNumber and dead = false
    {
    if collision_line(x, y, obj_player.x, obj_player.y, obj_solid, false, true) = noone{
        colTrue = true
        colList = collision_line_list(x, y, obj_player.x, obj_player.y, obj_solid, false, true);
        
        for (i = 0; i &lt; array_length_1d(colList); i += 1){
            if colList[i].visible = true{
                colTrue = true;
                
                }
            
            }
    
        if colTrue{
            wSway = random_range(-swayRange, swayRange);
            wDirection = point_direction(x, y, obj_player.x, obj_player.y);
            wDirection += wSway;
            
            // create the bullet and set its variables
            // if the enemy still has a shot on the player
            
            with(instance_create(x, y, obj_bullet)){
                parent = other;
                speed = 64;
                direction = parent.wDirection;
                    
                }
            }
        }

    }

alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reduce the speed if dead

if dead = true and speed &gt; 0{
    speed -= 2;
    
    }
    
// blood pools
if dead = true and speed = 0 and bloodDry = false{
    bloodPool = true;
    bloodDry = true;
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// enemy AI movement

if dead = false and active = true{

// detect whether or not it is a good idea
// to get into cover

if gCover = false and !collision_line(x, y, obj_player.x, obj_player.y, obj_solid, false, true)
and !collision_line(target.x, target.y, obj_player.x, obj_player.y, obj_solid, false, true){
    gCover = true;
    if target != obj_player{
        target.used = false;
        }
    }
    
if gCover = true{
    // find good cover
    found = false;
    i = 1;
    
    while found = false{
        poTarget = instance_nth_nearest(x, y, obj_cover_indicator, i);
        if poTarget.used = false{
            if collision_line(poTarget.x, poTarget.y, obj_player.x, obj_player.y, obj_solid, false, true){
                target = poTarget;
                found = true;
                poTarget.used = true;
                
                }else{
                i += 1;
                    
                }
            }else{
            i += 1
            }
        
        gCover = false;
        }
    
    // create the path
    
    mp_grid_path(global.grid, path, x, y, target.x, target.y, false){
    path_start(path, 5, path_action_stop, false);
        
    
    }
    
    gCover = false;
    }
    
/* shooting
sway = random_range(-swayRange, swayRange);

if !(collision_line(x, y, obj_player.x, obj_player.y, obj_solid, true, true)){
    if ready = true{
        with(instance_create(x, y, obj_bullet)){
            parent = obj_enemy;
            direction = point_direction(parent.x, parent.y, obj_player.x, obj_player.y) + other.sway;
            speed = 64 ;
            
            }
        ready = false;
        alarm[0] = 60;
        
        }
    
    }
*/}else{
    path_end();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// enemy AI shooting
// see if the enemy has a clear shot on the player


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if floorNumber = obj_player.floorNumber{
    visible = true;
    
    }else{
    visible = false;
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_car">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// push or kill the enemy

/// kill the enemy and throw him back

if other.speed &gt; 5 and dead = false{

if dead = false{
    dead = true;
    global.aliveEnemies -= 1;
    
    }
    
    /// kill the enemy and throw him back
    direction = other.direction + 45;
    speed = other.speed * 2;
    
    // request blood to be drawn at this spot
    drawBlood = true;
    bloodDir = other.direction;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// kill the enemy

if !(other.parent = obj_enemy)
{

/// kill the enemy and throw him back
if dead = false{
    dead = true;
    global.aliveEnemies -= 1;
    
    }

direction = other.direction;
speed = 30;

// request blood to be drawn at this spot
drawBlood = true;
bloodDir = obj_player.aim;

// draw blood to the wall ajacent to the shot
pX = other.parent.x;
pY = other.parent.y;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if dead stop the enemy

if dead = true{
    speed = 0;
    
    }else{
        //x = xprevious;
        //y = yprevious;
        
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_system_destroy(global.blood);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// prevent memory leaks

path_delete(path);
part_system_destroy(global.blood);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the enemy

draw_set_alpha(1);
draw_self();

// debugging

// draw a letter above the target

draw_set_colour(c_blue);
draw_line(x, y, target.x, target.y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw blood if requested

if drawBlood = true{
    bloodEmitter = part_emitter_create(blood);
    bloodType = part_type_create();
    part_type_alpha1(bloodType, 0.6);
    part_system_automatic_draw(blood, false);
    part_type_shape(bloodType, pt_shape_disk);
    part_type_life(bloodType, 1000000, 1000000);
    part_type_size(bloodType, bloodMinSize, bloodMaxSize, 0, 0);
    part_type_colour_rgb(bloodType, 130, 150, 6, 10, 6, 10);
    part_emitter_region(blood, bloodEmitter, x - 50, x + 50, y + 50, y - 50, ps_shape_ellipse, ps_distr_gaussian);
    part_emitter_burst(blood, bloodEmitter, bloodType, irandom_range(bloodMin, bloodMax));
    part_emitter_region(blood, bloodEmitter, x, x + lengthdir_x(200, bloodDir), y, y + lengthdir_y(200, bloodDir), ps_shape_line, ps_distr_gaussian);
    part_emitter_burst(blood, bloodEmitter, bloodType, irandom_range(bloodMin, bloodMax));
    part_emitter_region(blood, bloodEmitter, x - 50, x + 50, y + 50, y - 50, ps_shape_ellipse, ps_distr_gaussian);
    
    drawBlood = false;
    }
    
if bloodPool = true{
    part_emitter_region(global.blood, bloodEmitter, x, x, y, y, ps_shape_ellipse, ps_distr_gaussian);
    pool = part_type_create();
    part_type_colour_rgb(pool, 130, 150, 6, 10, 6, 10);
    part_type_life(pool, room_speed*5, room_speed*5);
    part_type_size(pool, poolMinSize, poolMinSize, poolMaxSize/(room_speed*5), 0);
    part_type_shape(pool, pt_shape_disk);
    part_emitter_burst(blood, bloodEmitter, pool, 1);
    alarm[1] = room_speed*5;
    
    bloodPool = false;
    
    }
    
// determine weather or not the particles should
// be drawn

if obj_player.floorNumber = floorNumber{
    if part_system_exists(blood){
        part_system_drawit(blood);
        }
    }
    
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
