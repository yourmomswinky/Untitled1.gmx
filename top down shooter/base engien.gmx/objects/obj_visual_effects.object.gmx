<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_null</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// declare variables
// day night cycle

timeOfDay = 0;
timeOfDayTwo = 0;
stepTwo = false;
surfaceAlpha = 1;

nightCycleSurf = 1;
shadowSurf = 1;
lowAlphaSurf = 1;
highAlphaSurf = 1;
depth = -5;
circleRange = 100;
nightColour = make_colour_hsv(170, 232, 12);

    leftWall = txtr_wall_test;
    rightWall = txtr_wall_test;
    frontWall = txtr_wall_test;
    backWall = txtr_wall_test;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(nightCycleSurf);
surface_free(shadowSurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the visual effects
// night

if (!surface_exists(nightCycleSurf)){
    nightCycleSurf = surface_create(view_wview/global.nightQuality, view_hview/global.nightQuality);
    
    }else{
    surface_resize(nightCycleSurf, view_wview/global.nightQuality, view_hview/global.nightQuality);
    
    }
    
if (!surface_exists(shadowSurf)){
    shadowSurf = surface_create(view_wview/global.shadowQuality, view_hview/global.shadowQuality);
    
    }else{
    surface_resize(shadowSurf, view_wview/global.shadowQuality, view_hview/global.shadowQuality);
    
    }

// handle the variables
if timeOfDay &gt;= 2{
    timeOfDay = 0;
    
    }
// actual time of day value
timeOfDay += 0.0001;
// testing time of day value
//timeOfDay += 0.003;
if obj_player.nightMode = true{
    timeOfDay = 1;
    
    }

if timeOfDay &lt; 0.5{
    surfaceAlpha = 0;
    
    }
    
if timeOfDay &lt; 1 and timeOfDay &gt;= 0.5{
    surfaceAlpha = (-power(timeOfDay-1.5, 2)+1)*1.4;
    
    }
    
if timeOfDay &lt; 1.5 and timeOfDay &gt;= 1{
    surfaceAlpha = (-power(timeOfDay-0.5, 2)+1)*1.4;
    
    }
    
if timeOfDay &lt; 1{
    timeOfDayTwo = timeOfDay/2 + 0.5;
    
    }

if timeOfDay &gt;= 1{
    timeOfDayTwo = timeOfDay/2 - 0.5;
    
    }

surfaceAlpha = clamp(surfaceAlpha, 0, 0.96);
surface_set_target(nightCycleSurf);
draw_clear_alpha(c_white, 0);
draw_set_alpha(1);
draw_clear(nightColour);

if timeOfDay &gt; 0.6 and timeOfDay &lt; 1.35{
    with (obj_light){
        //var iCircleX, iCircleY;
        //var iCircleAddX, iCircleAddY;
        //var iCircleScale;
        
        var oCircleX, oCircleY;
        var oCircleAddX, oCircleAddY;
        var oCircleScale;
    
        //iCircleX = x; iCircleY = y;
        //iCircleAddX = random_range(-2, 2);
        //iCircleAddY = random_range(-2, 2);
        //iCircleX += iCircleAddX;
        //iCircleY += iCircleAddY;
        //iCircleX -= view_xview;
        //iCircleY -= view_yview;
        
        oCircleX = x/global.nightQuality; oCircleY = y/global.nightQuality;
        oCircleAddX = random_range(-2, 2);
        oCircleAddY = random_range(-2, 2);
        oCircleX += oCircleAddX;
        oCircleY += oCircleAddY;
        oCircleX -= view_xview/global.nightQuality;
        oCircleY -= view_yview/global.nightQuality;
        
        draw_set_blend_mode(bm_subtract);
        // lights with gradients
        draw_sprite_ext(spr_glow, 1, oCircleX, oCircleY, (circleRange / 15)/global.nightQuality, (circleRange/15)/global.nightQuality, 0, c_white, 1);
        draw_set_blend_mode(bm_normal);
        
        // lights without gradients
        //draw_set_colour(c_black);
        //draw_set_alpha(0.8);
        //draw_circle(oCircleX, oCircleY, circleRange*2.5, false);
        
        //draw_set_alpha(0.5);
        //draw_circle(iCircleX, iCircleY, circleRange*5, false);
        
        //surface_reset_target();
        
        //draw_set_blend_mode(bm_normal);
        //draw_set_colour(lightColour);
        //draw_set_alpha(0.05);
        //draw_circle(oCircleX, oCircleY, circleRange*5, false);
        //draw_set_alpha(0.1);
        //draw_circle(iCircleX, iCircleY, circleRange*2.5, false);
        
        }
        
    with obj_building_marker{
        if active = true{
            var x1, x2, y1, y2
            
            x1 = x - (sprite_width / 2)
            x2 = x + (sprite_width / 2);
            y1 = y - (sprite_height / 2)
            y2 = y + (sprite_height / 2)
            
            x1 /= global.nightQuality;
            y1 /= global.nightQuality;
            x2 /= global.nightQuality;
            y2 /= global.nightQuality;
            
            x1 -= view_xview/global.nightQuality;
            x2 -= view_xview/global.nightQuality;
            y1 -= view_yview/global.nightQuality;
            y2 -= view_yview/global.nightQuality;
            
            draw_set_blend_mode(bm_subtract);
            draw_set_alpha(1);
            draw_set_colour(c_black);
            //draw_rectangle(x1, y1, x2, y2, false);
            draw_set_blend_mode(bm_normal);
            
            }
        
        }
        
    }
    
with (obj_car){
    if headlights = true{
        var x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6;
        
        x1 = x + lengthdir_x(200, image_angle + 15);
        y1 = y + lengthdir_y(200, image_angle + 15);
        x2 = x + lengthdir_x(200, image_angle - 15);
        y2 = y + lengthdir_y(200, image_angle - 15);
        x3 = x1 + lengthdir_x(550, image_angle + 30);
        y3 = y1 + lengthdir_y(550, image_angle + 30);
        x4 = x2 + lengthdir_x(550, image_angle - 30);
        y4 = y2 + lengthdir_y(550, image_angle - 30);
        
        x5 = x1 + lengthdir_x(800, image_angle + 45);
        y5 = y1 + lengthdir_y(800, image_angle + 45);
        x6 = x2 + lengthdir_x(800, image_angle - 45);
        y6 = y2 + lengthdir_y(800, image_angle - 45);
        
        x3 += random_range(-2, 2);
        y3 += random_range(-2, 2);
        x4 += random_range(-2, 2);
        y4 += random_range(-2, 2);
        x5 += random_range(-2, 2);
        y5 += random_range(-2, 2);
        x6 += random_range(-2, 2);
        y6 += random_range(-2, 2);
        
        x1 /= global.nightQuality;
        y1 /= global.nightQuality;
        x2 /= global.nightQuality;
        y2 /= global.nightQuality;
        x3 /= global.nightQuality;
        y3 /= global.nightQuality;
        x4 /= global.nightQuality;
        y4 /= global.nightQuality;
        x5 /= global.nightQuality;
        y5 /= global.nightQuality;
        x6 /= global.nightQuality;
        y6 /= global.nightQuality;
        
        x1 -= view_xview/global.nightQuality;
        y1 -= view_yview/global.nightQuality;
        x2 -= view_xview/global.nightQuality;
        y2 -= view_yview/global.nightQuality;
        x3 -= view_xview/global.nightQuality;
        y3 -= view_yview/global.nightQuality;
        x4 -= view_xview/global.nightQuality;
        y4 -= view_yview/global.nightQuality;
        x5 -= view_xview/global.nightQuality;
        y5 -= view_yview/global.nightQuality;
        x6 -= view_xview/global.nightQuality;
        y6 -= view_yview/global.nightQuality;
        
        draw_set_blend_mode(bm_subtract);
        
        draw_set_alpha(0.4);
        draw_set_colour(c_black);
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex(x1, y1);
        draw_vertex(x2, y2);
        draw_vertex(x3, y3);
        draw_vertex(x4, y4);
        draw_primitive_end();
        
        draw_set_alpha(0.2);
        draw_set_colour(c_black);
        draw_primitive_begin(pr_trianglestrip);
        draw_vertex(x1, y1);
        draw_vertex(x2, y2);
        draw_vertex(x5, y5);
        draw_vertex(x6, y6);
        draw_primitive_end();
        
        draw_set_blend_mode(bm_normal);
        
        }
    
    }
surface_reset_target();
if obj_player.floorNumber &gt; 0 draw_surface_ext(nightCycleSurf, view_xview, view_yview, global.nightQuality, global.nightQuality, 0, c_white, surfaceAlpha);

// shadows of:
// buildings

// needs a way to remove the effect from buildings and have it so certain ones dont draw a shadow
// i'm thinking a surface, but that causes frame rate issues

//lightEmitterX = room_width*(surfaceAlpha/0.96);
lightEmitterY = room_height * timeOfDayTwo;

lightEmitterX = room_width/2;
//lightEmitterY = -room_height/2;
surface_set_target(shadowSurf);
draw_clear_alpha(c_white, 0);


with (obj_building_marker){
    
    //draw_set_blend_mode(bm_subtract);
    //draw_set_alpha(1);
    //draw_clear(c_black);
    //draw_set_blend_mode(bm_normal);
    
    var x11, y11, x12, y12, x13, y13, x14, y14;
    var x21, y21, x22, y22, x23, y23, x24, y24;
    var x31, y31, x32, y32, x33, y33, x34, y34;
    var x41, y41, x42, y42, x43, y43, x44, y44;
    
    var lightOrientation
    
    lightOrientation = "";
    
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);    // needs to be time-dependent
    
    x11 = x - sprite_width/2; y11 = y - sprite_height/2;
    x12 = x - sprite_width/2; y12 = y + sprite_height/2;
    x13 = x11 + lengthdir_x(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x11, y11));
    y13 = y11 + lengthdir_y(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x11, y11));
    x14 = x12 + lengthdir_x(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x12, y12));
    y14 = y12 + lengthdir_y(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x12, y12));
    
    x21 = x12; y21 = y12;
    x22 = x + sprite_width/2; y22 = y + sprite_height/2;
    x23 = x14; y23 = y14;
    x24 = x22 + lengthdir_x(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x22, y22));
    y24 = y22 + lengthdir_y(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x22, y22));
    
    x31 = x22; y31 = y22;
    x32 = x + sprite_width/2; y32 = y - sprite_height/2;
    x33 = x24; y33 = y24;
    x34 = x32 + lengthdir_x(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x32, y32));
    y34 = y32 + lengthdir_y(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x32, y32));
    
    x41 = x32; y41 = y32;
    x42 = x + sprite_width/2; y42 = y - sprite_height/2;
    x43 = x34; y43 = y34;
    x44 = x42 + lengthdir_x(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x32, y32));
    y44 = y42 + lengthdir_y(200 * height, point_direction(other.lightEmitterX, other.lightEmitterY, x32, y32));
    
    x11 /= global.shadowQuality; y11 /= global.shadowQuality;
    x12 /= global.shadowQuality; y12 /= global.shadowQuality;
    x13 /= global.shadowQuality; y13 /= global.shadowQuality;
    x14 /= global.shadowQuality; y14 /= global.shadowQuality;
    x21 /= global.shadowQuality; y21 /= global.shadowQuality;
    x22 /= global.shadowQuality; y22 /= global.shadowQuality;
    x23 /= global.shadowQuality; y23 /= global.shadowQuality;
    x24 /= global.shadowQuality; y24 /= global.shadowQuality;
    x31 /= global.shadowQuality; y31 /= global.shadowQuality;
    x32 /= global.shadowQuality; y32 /= global.shadowQuality;
    x33 /= global.shadowQuality; y33 /= global.shadowQuality;
    x34 /= global.shadowQuality; y34 /= global.shadowQuality;
    x41 /= global.shadowQuality; y41 /= global.shadowQuality;
    x42 /= global.shadowQuality; y42 /= global.shadowQuality;
    x43 /= global.shadowQuality; y43 /= global.shadowQuality;
    x44 /= global.shadowQuality; y44 /= global.shadowQuality;
    
    x11 -= view_xview/global.shadowQuality; y11 -= view_yview/global.shadowQuality;
    x12 -= view_xview/global.shadowQuality; y12 -= view_yview/global.shadowQuality;
    x13 -= view_xview/global.shadowQuality; y13 -= view_yview/global.shadowQuality;
    x14 -= view_xview/global.shadowQuality; y14 -= view_yview/global.shadowQuality;
    x21 -= view_xview/global.shadowQuality; y21 -= view_yview/global.shadowQuality;
    x22 -= view_xview/global.shadowQuality; y22 -= view_yview/global.shadowQuality;
    x23 -= view_xview/global.shadowQuality; y23 -= view_yview/global.shadowQuality;
    x24 -= view_xview/global.shadowQuality; y24 -= view_yview/global.shadowQuality;
    x31 -= view_xview/global.shadowQuality; y31 -= view_yview/global.shadowQuality;
    x32 -= view_xview/global.shadowQuality; y32 -= view_yview/global.shadowQuality;
    x33 -= view_xview/global.shadowQuality; y33 -= view_yview/global.shadowQuality;
    x34 -= view_xview/global.shadowQuality; y34 -= view_yview/global.shadowQuality;
    x41 -= view_xview/global.shadowQuality; y41 -= view_yview/global.shadowQuality;
    x42 -= view_xview/global.shadowQuality; y42 -= view_yview/global.shadowQuality;
    x43 -= view_xview/global.shadowQuality; y43 -= view_yview/global.shadowQuality;
    x44 -= view_xview/global.shadowQuality; y44 -= view_yview/global.shadowQuality;
    
    if other.lightEmitterY &gt; y{
        lightOrientation += "Lo";
        
        }else{
        lightOrientation += "Hi";
        
        }
        
    if other.lightEmitterX &gt; x{
        lightOrientation += "Ri";
        
        }else{
        lightOrientation += "Le";
        
        }
    
    draw_set_color(c_black);
    draw_primitive_begin(pr_trianglestrip);
    // noth lefts need situations and HiRi needs testing
    
    if lightOrientation = "HiRi"{
        draw_vertex(x11, y11);
        draw_vertex(x13, y13);
        draw_vertex(x12, y12);
        draw_vertex(x14, y14);
        draw_vertex(x22, y22);
        draw_vertex(x24, y24);
        //draw_vertex(x12, y12);
        //draw_vertex(x24, y24);
        //draw_vertex(x22, y22);
        
        }
        
    if lightOrientation = "LoRi"{
        draw_vertex(x42, y42);
        draw_vertex(x44, y44);
        draw_vertex(x11, y11);
        draw_vertex(x13, y13);
        draw_vertex(x12, y12);
        draw_vertex(x23, y23);
        draw_vertex(x14, y14);
        
        }
    
    draw_primitive_end();
    
    with (obj_building_marker){
        draw_set_blend_mode(bm_subtract);
        var x1, y1, x2, y2;
        x1 = x - sprite_width/2+1; x2 = x + sprite_width/2-1;
        y1 = y - sprite_height/2+1; y2 = y + sprite_height/2-1;
        
        x1 /= global.shadowQuality; y1 /= global.shadowQuality;
        x2 /= global.shadowQuality; y2 /= global.shadowQuality;
        
        x1 -= view_xview/global.shadowQuality; x2 -= view_xview/global.shadowQuality;
        y1 -= view_yview/global.shadowQuality; y2 -= view_yview/global.shadowQuality;
        
        draw_rectangle(x1, y1, x2, y2, false);
        
        }
    
    }
    
// draw the surfaces
draw_set_blend_mode(bm_normal);
surface_reset_target();
if obj_player.floorNumber &gt; 0 draw_surface_ext(shadowSurf, view_xview, view_yview, global.shadowQuality, global.shadowQuality, 0, c_white, 0.4 - (surfaceAlpha/0.96));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// continued

for (i = 0; i &lt; instance_number(obj_building_marker); i += 1){
    with instance_nth_nearest(obj_player.x, obj_player.y, obj_building_marker, 
    instance_number(obj_building_marker) - i){
        if !place_meeting(x, y, obj_player){
            //f3d_draw_building_debug(400, obj_player);
            var roof = txtr_roof_test;
            
            f3d_draw_building_walls(height*100, obj_player,
            leftWall, rightWall, frontWall, backWall, roof);
            
            f3d_draw_building_roof(height*100, obj_player,
            leftWall, rightWall, frontWall, backWall, roof);
            
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
