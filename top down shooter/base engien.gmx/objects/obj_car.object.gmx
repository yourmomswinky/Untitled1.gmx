<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cars_main_body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 1;
active = true;
depth = 1;
controler = "none";
image_speed = 0;
floorNumber = 1;
spd = 0;
direction = 90;

allignCamera = false;

headlights = true;

keyA = false;
keyD = false;

randomize();

crashCooldown = false;

with instance_create(x, y, obj_car_child){
    parent = other;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>crashCooldown = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = drawSprite;
mask_index = maskSprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// placeholder controls

// taking control of the car

if distance_to_object(obj_player) &lt; 1{
    if keyboard_check_pressed(ord("E")){
        if controler = "none"{
            controler = obj_player;
            obj_player.control = false;
            }else if speed = 0{
            controler = "none"
            obj_player.control = true;
            }
        }
    }
    
if controler = obj_player and controler.dead = false
{

keyW = keyboard_check(ord("W"));
keyS = keyboard_check(ord("S"));
keyA = keyboard_check(ord("A"));
keyD = keyboard_check(ord("D"));

if keyW{
    spd += 0.1
    }
if keyS{
    spd -= 0.1
    }


}

if keyA{
    if speed &gt;= 0 {direction += (-1 / (((speed*speed) + 1)/ 5 ) + 5) / 4
    }else{direction += ((-1 / ((speed - 1.25)/ 5 ) + 5) / 3) - 3} 
    }
if keyD{
    if speed &gt;= 0 {direction -= (-1 / (((speed*speed) + 1)/ 5 ) + 5) / 4
    }else{direction -= ((-1 / ((speed - 1.25)/ 5 ) + 5) / 3) - 3} 
    }

spd = clamp(spd, -10, 30);
speed = spd;

if spd &lt; 0{
    speed = spd + 2;
    
    }

if spd &lt; 0 and spd &gt; -2{
    speed = 0;
    
    }
image_angle = direction;

if controler != "none"{
    controler.x = x;
    controler.y = y;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// camera

if controler = obj_player
{
realViewHview = view_hview * (1 + spd*0.01)
realViewWview = view_wview * (1 + spd*0.01)

view_hview = round(realViewHview);
view_wview = round(realViewWview);
    
realViewXview = x - view_wview/2;
realViewYview = y - view_hview/2;

realViewXview += lengthdir_x(spd*20, direction);
realViewYview += lengthdir_y(spd*20, direction);

view_xview = round(realViewXview);
view_yview = round(realViewYview);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// friction

if spd &gt; -0.5{
    spd -= 0.02;
    }
if spd &lt; -1.5{
    spd += 0.02;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// traffic AI

if controler != "none" and controler != obj_player and controler.dead = false{
    target = controler.travelTarget;
    
    if collision_line(x, y, x + lengthdir_x(1000, direction), y + lengthdir_y(1000, direction), obj_car, false, true)
    or collision_line(x, y, x + lengthdir_x(200, direction), y + lengthdir_y(200, direction), obj_walker, false, true)
    or collision_line(x, y, x + lengthdir_x(200, direction), y + lengthdir_y(200, direction), obj_player, false, true){
        if speed &gt; 0{
            spd -= 3;
            }
        }else{
        if speed &lt; 15{
            spd += 0.4;
            }
        }
        
    if collision_line(x, y, x + lengthdir_x(16, direction), y + lengthdir_y(16, direction), obj_car, false, true){
        if speed &gt; 0{
            spd = 0;
            }
        }
    
    if point_distance(x, y, target.x, target.y) &lt; 200{
        found = false;
        
        while found = false{
            i = irandom_range(1, 4);
            if i = 1{
                if target.UP = true{
                    controler.travelTarget = collision_line_first(target.x, target.y - 100,
                    target.x, target.y - 10000, obj_traffic_turn, true, true);
                    found = true;
                    }
                }
            if i = 2{
                if target.DOWN = true{
                    controler.travelTarget = collision_line_first(target.x, target.y + 100,
                    target.x, target.y + 10000, obj_traffic_turn, true, true);
                    found = true;
                    }
                }
            if i = 3{
                if target.LEFT = true{
                    controler.travelTarget = collision_line_first(target.x - 100, target.y,
                    target.x - 10000, target.y, obj_traffic_turn, true, true);
                    found = true;
                    }
                }
            if i = 4{
                if target.RIGHT = true{
                    controler.travelTarget = collision_line_first(target.x + 100, target.y,
                    target.x + 10000, target.y, obj_traffic_turn, true, true);
                    found = true;
                    }
                }

            target = controler.travelTarget;
            
            }
        
        }
        
        if abs(direction - point_direction(x, y, target.x, target.y)) &lt; 3 or abs(direction - point_direction(x, y, target.x, target.y)) &gt; 357{
            turnSpeed = speed * 0.2;
            
            }else{
            turnSpeed = speed * 2 + 0.5;
            
            }
        
        gradually_turn(self, target, turnSpeed, 1);
       
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_car">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if crashCooldown = false{
    speed *= -0.1;
    spd = 0;
    
    }

x = xprevious;
y = yprevious;

crashCooldown = true;
alarm[1] = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other instance_destroy()


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.floorNumber = obj_player.floorNumber or other.floorNumber = "none"{
    if crashCooldown = false{
        speed *= -0.1;
        spd = 0;
        
        }
    
    x = xprevious;
    y = yprevious;
    
    crashCooldown = true;
    alarm[1] = 3;
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active = true and controler != obj_player and speed = 0{
    with other{
        x = xprevious;
        y = yprevious;
        }
    }
    
if active = true and controler != obj_player and speed != 0{
    if speed &lt; 3{
        with other{
            speed = other.speed
            direction = other.direction
            
            }
        }else{
        with other{
            speed = other.speed + 1;
            direction = other.direction + 20;
            
            }
        
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -1;
draw_self();

// debugging
if controler = obj_actor{
    draw_set_colour(c_blue);
    draw_line(x, y, target.x, target.y)
    draw_line(target.x, target.y, target.x, target.y - 10000);
    draw_line(target.x, target.y, target.x + 10000, target.y);
    draw_line(target.x, target.y, target.x, target.y - 10000);
    draw_line(target.x, target.y, target.x - 10000, target.y);
    
    draw_text(target.x + 20, target.y, target.UP);
    draw_text(target.x + 20, target.y + 10, target.DOWN);
    draw_text(target.x + 20, target.y + 20, target.LEFT);
    draw_text(target.x + 20, target.y + 30, target.RIGHT);
    
    draw_circle(target.x, target.y, 100, true);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
