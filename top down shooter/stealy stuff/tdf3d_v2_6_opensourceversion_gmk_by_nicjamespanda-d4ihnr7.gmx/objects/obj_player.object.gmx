<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_collision_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//bunch of variables, feel free to use this player script in your games altho its up to you to figure it out i wont be spending too much time commenting this since the example is mostly about the fake 3d
player_speed=0.5 //the rate the player accelerates running
friction=0.3 //friction
player_max_speed=3 //the max speed player can run
leg_direction=0 
leg_angle=0
body_angle=leg_angle
image_speed=0
body_index=spr_player_body_run
movement=0 //0 = absolute, 1=relative (this is the type of movement, absolout means he goes in the directoin pressed, relative means its adjusted by the key pressed) try both styles of movement!
direction=image_angle-180
look_mouse=0
mouse_timer=0
oldx = mouse_x
oldy = mouse_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.car=instance_nearest(x,y,obj_car)//this is for when you have multiple car objects 
if global.incar=0//if not in car do the following
{visible=true
mask_index=spr_player_collision_mask
if movement=0 {//if the 1st style movement is selected from create event:
if keyboard_check(ord('W')) {vspeed+=-player_speed}//move the player
if keyboard_check(ord('S')) {vspeed+=+player_speed}
if keyboard_check(ord('A')) {hspeed+=-player_speed}
if keyboard_check(ord('D')) {hspeed+=+player_speed}
if speed&gt;0.1 {
leg_angle += median(-6, 6, ((((direction - leg_angle) mod 360) + 540) mod 360) - 180)//adjust legs to player direction
if body_angle&lt;leg_angle-45 {body_angle=leg_angle-45}//make sure the legs dont go ape shit
if body_angle&gt;leg_angle+45 {body_angle=leg_angle+45}
}
else
{
if leg_angle&lt;body_angle-45 {leg_angle=body_angle}
if leg_angle&gt;body_angle+45 {leg_angle=body_angle}
}

if(oldx &lt;&gt; mouse_x &amp;&amp; oldy &lt;&gt; mouse_y){ //if the mouse is moving let the player look at the mouse
{body_angle+= median(-6, 6, (((((point_direction(x,y,mouse_x,mouse_y)) - body_angle) mod 360) + 540) mod 360) - 180)}


}
// update old mouse positions
oldx = mouse_x;
oldy = mouse_y;


}
    if movement=1 { // if the 2nd style movement is selected from create event:
    if keyboard_check(ord('W')) {speed+=+player_speed}
    //if keyboard_check(ord('S')) {speed+=-player_speed}
    if keyboard_check(ord('A')) {if speed&gt;0 leg_angle+=+(4)}
    if keyboard_check(ord('D')) {if speed&gt;0 leg_angle+=-(4)}
    direction+= median(-6, 6, (((((leg_angle) - direction) mod 360) + 540) mod 360) - 180)
    
     
//    if(oldx &lt;&gt; mouse_x &amp;&amp; oldy &lt;&gt; mouse_y){
//if speed&gt;0.1 then body_angle=leg_angle else {leg_angle=body_angle  body_angle+= median(-6, 6, (((((point_direction(x,y,mouse_x,mouse_y)) - body_angle) mod 360) + 540) mod 360) - 180)}
   
//}

body_angle=leg_angle
// update old positions
oldx = mouse_x;
oldy = mouse_y;
    
    //body_angle+= median(-6, 6, (((((point_direction(x,y,mouse_x,mouse_y)) - body_angle) mod 360) + 540) mod 360) - 180)
    //if body_angle&lt;leg_angle-45 {body_angle=leg_angle-45}
    //if body_angle&gt;leg_angle+45 {body_angle=leg_angle+45}
    }
if speed&gt;player_max_speed then speed=player_max_speed
if speed&lt;-(player_max_speed/2) then speed=-(player_max_speed/2)
image_speed=speed/20
if speed&lt;0.1 then image_index=0

//change the weapons (have no firing functions yet, altho easily implemented...
//...just check the body_index variable in the keypress event for shoot!
if keyboard_check_pressed(ord('1')) then body_index=spr_player_body_run
if keyboard_check_pressed(ord('2')) then body_index=spr_player_body_pistol
if keyboard_check_pressed(ord('3')) then body_index=spr_player_body_uzi
if keyboard_check_pressed(ord('4')) then body_index=spr_player_body_machinegun
if keyboard_check_pressed(ord('5')) then body_index=spr_player_rocket_launcher
}
else {visible=true//if in the car hide the player sprite
mask_index=spr_blank//make the mask black so the playe doesnt try and move out of the car
x=global.car.x//put the player in the car
y=global.car.y}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lamp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a,xoff,yoff;
a=point_direction(x,y,other.x,other.y)
xoff=lengthdir_x(0.5,a);
yoff=lengthdir_y(0.5,a);
while(place_meeting(x,y,other))
{
x-=xoff;
y-=yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tree">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a,xoff,yoff;
a=point_direction(x,y,other.x,other.y)
xoff=lengthdir_x(0.5,a);
yoff=lengthdir_y(0.5,a);
while(place_meeting(x,y,other))
{
x-=xoff;
y-=yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_car">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a,xoff,yoff;
a=point_direction(x,y,other.x,other.y)
xoff=lengthdir_x(0.5,a);
yoff=lengthdir_y(0.5,a);
while(place_meeting(x,y,other))
{
x-=xoff;
y-=yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_building2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a,xoff,yoff;
a=point_direction(x,y,other.x,other.y)
xoff=lengthdir_x(0.5,a);
yoff=lengthdir_y(0.5,a);
while(place_meeting(x,y,other))
{
x-=xoff;
y-=yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_building">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//collisions.
var a,xoff,yoff;
a=point_direction(x,y,other.x,other.y)
xoff=lengthdir_x(0.5,a);
yoff=lengthdir_y(0.5,a);
while(place_meeting(x,y,other))
{
x-=xoff;
y-=yoff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.incar=0 {//this draws the player if not in the car
draw_sprite_ext(spr_player_legs,image_index,x,y,1,1,leg_angle,image_blend,image_alpha)
draw_sprite_ext(body_index,image_index,x,y,1,1,body_angle,image_blend,image_alpha)
}
else {//i was going to do something with this else event, not i cant remember, this can be removed lol ^_^
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
